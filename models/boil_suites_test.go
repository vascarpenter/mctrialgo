// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Events", testEvents)
	t.Run("Hospitals", testHospitals)
	t.Run("Patients", testPatients)
}

func TestDelete(t *testing.T) {
	t.Run("Events", testEventsDelete)
	t.Run("Hospitals", testHospitalsDelete)
	t.Run("Patients", testPatientsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Events", testEventsQueryDeleteAll)
	t.Run("Hospitals", testHospitalsQueryDeleteAll)
	t.Run("Patients", testPatientsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Events", testEventsSliceDeleteAll)
	t.Run("Hospitals", testHospitalsSliceDeleteAll)
	t.Run("Patients", testPatientsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Events", testEventsExists)
	t.Run("Hospitals", testHospitalsExists)
	t.Run("Patients", testPatientsExists)
}

func TestFind(t *testing.T) {
	t.Run("Events", testEventsFind)
	t.Run("Hospitals", testHospitalsFind)
	t.Run("Patients", testPatientsFind)
}

func TestBind(t *testing.T) {
	t.Run("Events", testEventsBind)
	t.Run("Hospitals", testHospitalsBind)
	t.Run("Patients", testPatientsBind)
}

func TestOne(t *testing.T) {
	t.Run("Events", testEventsOne)
	t.Run("Hospitals", testHospitalsOne)
	t.Run("Patients", testPatientsOne)
}

func TestAll(t *testing.T) {
	t.Run("Events", testEventsAll)
	t.Run("Hospitals", testHospitalsAll)
	t.Run("Patients", testPatientsAll)
}

func TestCount(t *testing.T) {
	t.Run("Events", testEventsCount)
	t.Run("Hospitals", testHospitalsCount)
	t.Run("Patients", testPatientsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Events", testEventsHooks)
	t.Run("Hospitals", testHospitalsHooks)
	t.Run("Patients", testPatientsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Events", testEventsInsert)
	t.Run("Events", testEventsInsertWhitelist)
	t.Run("Hospitals", testHospitalsInsert)
	t.Run("Hospitals", testHospitalsInsertWhitelist)
	t.Run("Patients", testPatientsInsert)
	t.Run("Patients", testPatientsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Events", testEventsReload)
	t.Run("Hospitals", testHospitalsReload)
	t.Run("Patients", testPatientsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Events", testEventsReloadAll)
	t.Run("Hospitals", testHospitalsReloadAll)
	t.Run("Patients", testPatientsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Events", testEventsSelect)
	t.Run("Hospitals", testHospitalsSelect)
	t.Run("Patients", testPatientsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Events", testEventsUpdate)
	t.Run("Hospitals", testHospitalsUpdate)
	t.Run("Patients", testPatientsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Events", testEventsSliceUpdateAll)
	t.Run("Hospitals", testHospitalsSliceUpdateAll)
	t.Run("Patients", testPatientsSliceUpdateAll)
}
